import streamlit as st
import pandas as pd
import joblib
import os
import asyncio
import nest_asyncio
import requests
from sklearn.pipeline import Pipeline

def download_modelo():
    """
    Faz o download do modelo mais recente.

    Returns:
        sdp_dataset (pandas.DataFrame): DataFrame com os dados carregados.
    """
    url = "https://github.com/matheusfinger/model-pipeline-brfss/raw/main/best_model.pkl"
    output_file = "best_model.pkl"

    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()  # Verifica se houve erro na requisi√ß√£o
        
        with open(output_file, 'wb') as file:
            for chunk in response.iter_content(chunk_size=8192):
                file.write(chunk)
        
        st.success(f"Modelo baixado com sucesso: {output_file}")
    except requests.exceptions.RequestException as e:
        st.error(f"Erro ao baixar o modelo: {e}. Verifique sua conex√£o com a internet ou o URL.")
        st.stop()

# Importa√ß√µes de fun√ß√µes de outros arquivos
from utils import (
    interpretar_threshold
)
from model_evaluation import show_model_details_page

nest_asyncio.apply()

# ==============================================================================
# CONFIGURA√á√ÉO DA P√ÅGINA E CACHE
# ==============================================================================

st.set_page_config(page_title="Sistema de An√°lise de Risco de Diabetes", layout="wide")


@st.cache_data
def load_data(path):
    """Carrega o dataset e o armazena em cache para performance."""
    df = pd.read_csv(path)
    return df

default_explanation_map = {
    "BMI": "Body Mass Index (BMI) √© um indicador comum de obesidade, que est√° fortemente associado a um risco aumentado de diabetes tipo 2. Manter um IMC saud√°vel √© crucial para a preven√ß√£o.",
    "Age": "Idade √© um fator de risco n√£o modific√°vel para diabetes tipo 2, com o risco aumentando progressivamente com o envelhecimento devido a mudan√ßas metab√≥licas e menor sensibilidade √† insulina.",
    "HighBP": "Press√£o Alta (hipertens√£o) √© uma comorbidade frequente em indiv√≠duos com diabetes, e ambos os problemas compartilham fatores de risco, aumentando o risco cardiovascular geral.",
    "HighChol": "N√≠veis elevados de colesterol (dislipidemia) s√£o frequentemente observados em pacientes com diabetes, contribuindo para o risco de doen√ßas cardiovasculares, uma complica√ß√£o comum do diabetes.",
    "Smoker": "Fumar aumenta o risco de desenvolver diabetes tipo 2 e suas complica√ß√µes, pois pode levar √† resist√™ncia √† insulina e inflama√ß√£o sist√™mica.",
    "PhysActivity": "Atividade f√≠sica regular melhora a sensibilidade √† insulina e ajuda no controle do peso, reduzindo significativamente o risco de desenvolver diabetes tipo 2. A inatividade f√≠sica, por outro lado, aumenta o risco.",
    "HvyAlcoholConsump": "Consumo pesado de √°lcool pode impactar negativamente o metabolismo da glicose e contribuir para o ganho de peso, aumentando o risco de diabetes tipo 2.",
    "GenHlth": "Sa√∫de Geral autoavaliada reflete o bem-estar percebido e a presen√ßa de outras condi√ß√µes cr√¥nicas que podem influenciar o risco de diabetes.",
    "MentHlth": "Problemas de Sa√∫de Mental, como estresse cr√¥nico, depress√£o e ansiedade, podem indiretamente aumentar o risco de diabetes devido a mudan√ßas no estilo de vida, h√°bitos alimentares e respostas hormonais (como o cortisol).",
    "PhysHlth": "Problemas de Sa√∫de F√≠sica frequentes ou cr√¥nicos podem indicar condi√ß√µes subjacentes ou um estilo de vida que aumenta a vulnerabilidade ao diabetes.",
    "DiffWalk": "Dificuldades para Caminhar ou se mover podem ser um sinal de inatividade f√≠sica e outras comorbidades, ambas elevando o risco de diabetes.",
    "Sex": "Existem diferen√ßas no perfil de preval√™ncia e risco de diabetes entre os sexos biol√≥gicos, influenciadas por fatores hormonais, gen√©ticos e de estilo de vida.",
    "Education": "N√≠veis mais baixos de Escolaridade podem estar associados a menor acesso a informa√ß√µes de sa√∫de e estilos de vida menos saud√°veis, impactando o risco de diabetes.",
    "Income": "Renda √© um fator socioecon√¥mico que afeta o acesso a alimentos saud√°veis, cuidados m√©dicos preventivos e outros recursos de sa√∫de, influenciando o risco de diabetes.",
    "Fruits": "Consumo adequado de Frutas, como parte de uma dieta equilibrada, √© importante para a sa√∫de geral e pode contribuir para a preven√ß√£o do diabetes devido ao seu teor de fibras e nutrientes.",
    "Veggies": "Consumo de Vegetais √© fundamental para uma dieta saud√°vel, fornecendo fibras e antioxidantes que apoiam a sa√∫de metab√≥lica e podem reduzir o risco de diabetes.",
    "CholCheck": "Verifica√ß√£o regular de Colesterol √© um indicador de monitoramento da sa√∫de e detec√ß√£o precoce de fatores de risco que podem estar ligados ao diabetes.",
    "AnyHealthcare": "Ter acesso a algum tipo de plano de sa√∫de ou cobertura m√©dica facilita o cuidado preventivo, o diagn√≥stico precoce e o manejo de condi√ß√µes que podem levar ao diabetes.",
    "NoDocbcCost": "Deixar de consultar um m√©dico por causa do Custo pode resultar em diagn√≥stico tardio e manejo inadequado de condi√ß√µes de sa√∫de, aumentando o risco de progress√£o do diabetes.",
}

# Novo mapa para nomes amig√°veis das vari√°veis
friendly_feature_names = {
    "HighBP": "Press√£o Alta",
    "HighChol": "Colesterol Alto",
    "CholCheck": "Checagem de Colesterol",
    "BMI": "√çndice de Massa Corporal (IMC)",
    "Smoker": "Fumante",
    "Stroke": "AVC (Derrame)",
    "HeartDiseaseorAttack": "Doen√ßa Card√≠aca/Infarto",
    "PhysActivity": "Atividade F√≠sica",
    "Fruits": "Consumo de Frutas",
    "Veggies": "Consumo de Vegetais",
    "HvyAlcoholConsump": "Consumo Pesado de √Ålcool",
    "AnyHealthcare": "Acesso a Plano de Sa√∫de",
    "NoDocbcCost": "N√£o Consultou M√©dico por Custo",
    "GenHlth": "Sa√∫de Geral",
    "MentHlth": "Sa√∫de Mental",
    "PhysHlth": "Sa√∫de F√≠sica",
    "DiffWalk": "Dificuldade para Caminhar",
    "Sex": "Sexo Biol√≥gico",
    "Age": "Faixa Et√°ria",
    "Education": "Escolaridade",
    "Income": "Renda",
}


def explicar_passo_da_arvore(
    nome, valor_usuario, e_menor_ou_igual, threshold
):
    """
    Gera uma explica√ß√£o detalhada para cada passo da √°rvore de decis√£o usando uma resposta padr√£o do mapa.
    Retorna a explica√ß√£o formatada e uma lista vazia para as chaves de refer√™ncia citadas.
    """
    interpretacao_th_formatada = interpretar_threshold(nome, threshold)
    direcao_texto_padrao = "menor ou igual a" if e_menor_ou_igual else "maior que"

    # Obt√©m o nome amig√°vel do atributo, se dispon√≠vel, sen√£o usa o nome da vari√°vel
    nome_amigavel = friendly_feature_names.get(nome, nome)

    # Get explanation from the map, or a generic one if not found
    standard_explanation = default_explanation_map.get(
        nome,
        f"Esta decis√£o se baseia em um limite predefinido para a caracter√≠stica '{nome_amigavel}'. "
        f"Seu valor de '{valor_usuario}' foi comparado com o limite de '{interpretacao_th_formatada}'. "
        f"Esta √© uma das muitas regras que o modelo considera para determinar o risco de diabetes."
    )

    # Nova formata√ß√£o da sa√≠da
    full_explanation = (
        f"Para o atributo **{nome_amigavel}**, seu valor √© `{valor_usuario}` e o limiar √© `{interpretacao_th_formatada}`. "
        f"Esse atributo √© importante para o diagn√≥stico porque {standard_explanation}"
    )
    return full_explanation

# ==============================================================================
# P√ÅGINA 1: AN√ÅLISE DE RISCO (PREDI√á√ÉO)
# ==============================================================================
def show_prediction_page():
    st.title("ü©∫ An√°lise de Risco de Diabetes com √Årvore de Decis√£o Explic√°vel")
    with st.spinner("Verificando e baixando o modelo mais recente..."):
        download_modelo()

    columns_to_normalize = ["BMI", "GenHlth", "MentHlth", "PhysHlth", "Age", "Education", "Income"]
    columns_to_pass_through = [
        "HighBP", "HighChol", "CholCheck", "Smoker", "Stroke",
        "HeartDiseaseorAttack", "PhysActivity", "Fruits", "Veggies",
        "HvyAlcoholConsump", "AnyHealthcare", "NoDocbcCost", "DiffWalk", "Sex"
    ]
    feature_names = columns_to_normalize + columns_to_pass_through

    try:
        modelo_path = "best_model.pkl"
        modelo = joblib.load(modelo_path)
    except FileNotFoundError:
        st.error(f"Erro: O arquivo do modelo '{modelo_path}' n√£o foi encontrado ap√≥s o download.")
        st.info("Por favor, verifique a conex√£o ou tente novamente.")
        st.stop()
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar o modelo: {e}")
        st.stop()

    def entrada_binaria(label, help_text=""):
        return 1 if st.radio(label, ["Sim", "N√£o"], horizontal=True, help=help_text) == "Sim" else 0

    with st.form("formulario_dados"):
        st.subheader("Por favor, preencha as informa√ß√µes abaixo:")

        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("##### Sa√∫de e H√°bitos")
            HighBP = entrada_binaria("Tem press√£o alta?", "Diagn√≥stico m√©dico de hipertens√£o.")
            HighChol = entrada_binaria("Tem colesterol alto?", "Diagn√≥stico m√©dico de colesterol alto.")
            CholCheck = entrada_binaria("Fez exame de colesterol nos √∫ltimos 5 anos?")
            Smoker = entrada_binaria("√â fumante? (pelo menos 100 cigarros na vida)")
            Stroke = entrada_binaria("J√° teve um AVC (derrame)?")
            HeartDiseaseorAttack = entrada_binaria("Tem doen√ßa card√≠aca ou j√° teve um infarto?")
            MentHlth = st.number_input(
                "Agora, pensando em sua sa√∫de mental, que inclui estresse, depress√£o e problemas emocionais, por quantos dias nos √∫ltimos 30 dias sua sa√∫de mental n√£o foi boa? Escala de 1 a 30 dias", min_value=0.0, max_value=30.0, value=0.0, step=1.0
            )

        with col2:
            st.markdown("##### Estilo de Vida e Acesso √† Sa√∫de")
            PhysActivity = entrada_binaria(
                "Pratica atividade f√≠sica regularmente?", "Atividade f√≠sica no √∫ltimo m√™s, al√©m do trabalho regular."
            )
            Fruits = entrada_binaria("Consome frutas 1 ou mais vezes por dia?")
            Veggies = entrada_binaria("Consome vegetais 1 ou mais vezes por dia?")
            HvyAlcoholConsump = entrada_binaria(
                "Consumo pesado de √°lcool?", "Homens: 14+ doses/semana. Mulheres: 7+ doses/semana."
            )
            AnyHealthcare = entrada_binaria("Tem algum tipo de plano de sa√∫de?")
            NoDocbcCost = entrada_binaria("J√° deixou de consultar um m√©dico por causa do custo?")
            DiffWalk = entrada_binaria("Tem s√©ria dificuldade de caminhar ou subir escadas?")
            PhysHlth = st.number_input(
                "Agora, pensando em sua sa√∫de f√≠sica, que inclui doen√ßas f√≠sicas e les√µes, por quantos dias nos √∫ltimos 30 dias sua sa√∫de f√≠sica n√£o foi boa? Escala de 1 a 30 dias", min_value=0.0, max_value=30.0, value=0.0, step=1.0
            )

        with col3:
            st.markdown("##### Dados Demogr√°ficos e Gerais")
            GenHlth = st.slider("Como voc√™ avalia sua sa√∫de em geral? (1=Excelente, 5=Ruim)", 1, 5, 3)
            Weight = st.number_input(
                "Qual seu peso (Kg)?", min_value=0.0, max_value=400.0, value=60.0, step=0.1
            )
            Height = st.number_input(
                "Qual sua Altura (metros)?", min_value=0.0, max_value=3.0, value=1.6, step=0.1
            )
            Age = st.slider(
                "Qual sua faixa et√°ria?",
                1,
                13,
                8,
                help="1: 18-24, 2: 25-29, ..., 8: 55-59, ..., 13: 80 anos ou mais",
            )
            BMI = Weight/(Height**2)
            Income = st.slider(
                "Qual sua faixa de renda anual? (1=Menor, 8=Maior)",
                1,
                8,
                5,
                help="1: <$10k, ..., 5: <$35k, ..., 8: >$75k",
            )
            Education = st.slider(
                "Qual seu n√≠vel de escolaridade? (1=Nenhuma, 6=Superior completo)", 1, 6, 4
            )
            Sex = 1 if st.selectbox("Qual seu sexo biol√≥gico?", ["Feminino", "Masculino"]) == "Masculino" else 0


        submitted = st.form_submit_button("Analisar Risco de Diabetes")

        if submitted:
            entrada_dict = {
                "HighBP": HighBP,
                "HighChol": HighChol,
                "CholCheck": CholCheck,
                "BMI": BMI,
                "Smoker": Smoker,
                "Stroke": Stroke,
                "HeartDiseaseorAttack": HeartDiseaseorAttack,
                "PhysActivity": PhysActivity,
                "Fruits": Fruits,
                "Veggies": Veggies,
                "HvyAlcoholConsump": HvyAlcoholConsump,
                "AnyHealthcare": AnyHealthcare,
                "NoDocbcCost": NoDocbcCost,
                "GenHlth": GenHlth,
                "MentHlth": MentHlth,
                "PhysHlth": PhysHlth,
                "DiffWalk": DiffWalk,
                "Sex": Sex,
                "Age": Age,
                "Education": Education,
                "Income": Income,
            }

            entrada_usuario_df = pd.DataFrame([entrada_dict])
            entrada_usuario_df = entrada_usuario_df[
                feature_names
            ]

            predicao = modelo.predict(entrada_usuario_df)[0]
            probabilidade = modelo.predict_proba(entrada_usuario_df)[0]
            st.divider()
            st.subheader("Resultado da An√°lise")
            if predicao == 1:
                st.error(
                    f"**Diagn√≥stico Preditivo: RISCO ALTO de ter diabetes ou pr√©-diabetes.** (Probabilidade: {probabilidade[1]*100:.1f}%)",
                    icon="üö®",
                )
            else:
                st.success(
                    f"**Diagn√≥stico Preditivo: RISCO BAIXO de ter diabetes.** (Probabilidade: {probabilidade[1]*100:.1f}%)",
                    icon="‚úÖ",
                )

            with st.expander("Clique aqui para ver a explica√ß√£o detalhada do resultado", expanded=True):
                st.info(
                    "A √Årvore de Decis√£o toma uma s√©rie de decis√µes 'sim/n√£o' para classificar um paciente. Abaixo est√° o caminho exato que o modelo seguiu com os seus dados.",
                    icon="üó∫Ô∏è",
                )

                if isinstance(modelo, Pipeline):
                    tree_model = modelo.named_steps["classifier"]
                    entrada_usuario_transformada = modelo.named_steps["preprocessor"].transform(
                        entrada_usuario_df
                    )
                else:
                    tree_model = modelo
                    entrada_usuario_transformada = entrada_usuario_df.to_numpy()

                decision_path = tree_model.decision_path(entrada_usuario_transformada).indices

                all_cited_keys = set()

                for i, node_index in enumerate(decision_path):
                    if i == len(decision_path) - 1:
                        resultado_no_final = tree_model.tree_.value[node_index][0]
                        total_amostras = resultado_no_final.sum()
                        perc_positivo = (resultado_no_final[1] / total_amostras) * 100
                        st.markdown(
                            f"**üèÅ Resultado Final:** O caminho terminou em um grupo onde **{perc_positivo:.1f}%** dos indiv√≠duos tinham risco de diabetes."
                        )
                        continue

                    feature_index = tree_model.tree_.feature[node_index]
                    feature_name = feature_names[feature_index]
                    threshold = tree_model.tree_.threshold[node_index]

                    valor_usuario_feature = entrada_usuario_df[feature_name].iloc[0]

                    e_menor_ou_igual = valor_usuario_feature <= threshold

                    explanation_text = (
                        explicar_passo_da_arvore(
                            feature_name,
                            valor_usuario_feature,
                            e_menor_ou_igual,
                            threshold,
                        )
                    )
                    st.markdown(f"##### Passo {i+1}:")
                    st.markdown(explanation_text)


# ==============================================================================
# NAVEGA√á√ÉO PRINCIPAL
# ==============================================================================
st.sidebar.title("Navega√ß√£o")
page = st.sidebar.radio("Escolha uma p√°gina:", ["An√°lise de Risco (Predi√ß√£o)", "Detalhes do Modelo (Avalia√ß√£o)"])

if page == "An√°lise de Risco (Predi√ß√£o)":
    show_prediction_page()
else:
    show_model_details_page()